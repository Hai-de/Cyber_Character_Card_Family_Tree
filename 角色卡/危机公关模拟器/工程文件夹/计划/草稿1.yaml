```
<!DOCTYPE html>
<html lang="zh">

<head>
  <meta charset="UTF-8">
  
</head>

<body>
  

  <script>
    // 定义游戏文本模板
    let gameText = `<outputcontent>$1</outputcontent>`;

    // 数据提取器
    const DataExtractor = {
      extractContent(text) {
        // 检查是否有outputcontent标签
        const outputContentMatch = text.match(/<outputcontent>([\s\S]*?)<\/outputcontent>/);
        const content = outputContentMatch ? outputContentMatch[1] : text;

        // 匹配三个主要部分的内容
        const articleMatch = content.match(/<article>([\s\S]*?)<\/article>/);
        const personMatch = content.match(/<personstatus>([\s\S]*?)<\/personstatus>/);
        const academicMatch = content.match(/<academics>([\s\S]*?)<\/academics>/);

        return {
          story: articleMatch ? articleMatch[1].trim() : '',
          person: this.extractPersonInfo(personMatch ? personMatch[1] : ''),
          academic: this.extractAcademicInfo(academicMatch ? academicMatch[1] : '')
        };
      },

      extractPersonInfo(text) {
        const info = {};
        const lines = text.split('\n');
        lines.forEach(line => {
          const [key, value] = line.split('：').map(s => s.trim());
          if (key && value) {
            info[key] = value;
          }
        });
        return info;
      },

      extractAcademicInfo(text) {
        const info = {};
        const lines = text.split('\n');
        lines.forEach(line => {
          const [key, value] = line.split('：').map(s => s.trim());
          if (key && value) {
            info[key] = value;
          }
        });
        return info;
      }
    };

    // UI更新器
    const UIUpdater = {
      updateContent(data) {
        if (!data) return;
        this.updateStory(data.story);
        this.updatePersonInfo(data.person);
        this.updateAcademicInfo(data.academic);
      },

      updateStory(content) {
        if (!content) return;
        document.querySelector('.story-content').innerHTML = content;
      },

      updatePersonInfo(data) {
        if (!data) return;
        const personStatus = document.querySelector('personstatus');
        if (!personStatus) return;

        personStatus.innerHTML = Object.entries(data)
          .map(([key, value]) => `${key}：${value}`)
          .join('\n');
      },

      updateAcademicInfo(data) {
        if (!data) return;
        const academics = document.querySelector('academics');
        if (!academics) return;

        academics.innerHTML = Object.entries(data)
          .map(([key, value]) => `${key}：${value}`)
          .join('\n');
      }
    };

    function switchTab(tabId) {
      document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
      });
      document.querySelectorAll('.link').forEach(tab => {
        tab.classList.remove('active');
      });

      document.getElementById(tabId).classList.add('active');
      document.querySelector(`.link[onclick="switchTab('${tabId}')"]`).classList.add('active');
    }

    // 初始化函数
    function initializeContent() {
      const content = document.body.innerHTML;
      const data = DataExtractor.extractContent(content);
      if (data) {
        UIUpdater.updateContent(data);
      }
    }

    // 在页面加载时初始化
    document.addEventListener('DOMContentLoaded', function () {
      initializeFontSizeControls();
      bindEventListeners();
      initializeContent();  // 确保内容初始化函数被调用
    });

    // 提供一个全局函数用于更新内容
    window.updatePageContent = function (content) {
      const data = DataExtractor.extractContent(content);
      if (data) {
        UIUpdater.updateContent(data);
      }
    };

    // 保存设置到localStorage
    function saveSettings(key, value) {
      try {
        let settings = JSON.parse(localStorage.getItem('articleSettings') || '{}');
        settings[key] = value;
        localStorage.setItem('articleSettings', JSON.stringify(settings));
      } catch (e) {
        console.error('保存设置失败:', e);
      }
    }

    // 从localStorage加载设置
    function loadSettings() {
      try {
        return JSON.parse(localStorage.getItem('articleSettings') || '{}');
      } catch (e) {
        console.error('加载设置失败:', e);
        return {};
      }
    }

    // 修改初始化函数
    function initializeFontSizeControls() {
      const storySlider = document.getElementById('storyFontSize');
      const infoSlider = document.getElementById('infoFontSize');
      const paddingSlider = document.getElementById('containerPadding');
      const contentPaddingSlider = document.getElementById('contentPadding');
      const bgColorInput = document.getElementById('bgColor');
      const textColorInput = document.getElementById('textColor');

      // 加载保存的设置
      const savedSettings = loadSettings();

      function updateFontSize(target, size) {
        const elements = document.querySelectorAll(target);
        elements.forEach(el => el.style.fontSize = size + 'px');

        // 更新设置面板中的标题大小提示
        const settingsTitles = document.querySelectorAll('.settings-title');
        settingsTitles.forEach(title => {
          if (target === '.story-content' && title.textContent === '剧情文字大小') {
            title.style.fontSize = size + 'px';
          } else if (target === 'personstatus, academics' && title.textContent === '信息文字大小') {
            title.style.fontSize = size + 'px';
          }
        });
      }

      function updateContainerPadding(size) {
        const container = document.querySelector('.container');
        container.style.padding = size + 'px';
        // 同时更新容器高度，保持与padding同步
        container.style.height = `calc(100vh - ${size * 2}px)`;
      }

      function updateContentPadding(size) {
        document.querySelector('.content-area').style.padding = size + 'px';
      }

      function updateBackgroundColor(color) {
        // 更新背景色
        document.body.style.background = color;
        // 更新导航栏背景色，保持半透明效果
        const rgba = hexToRgba(color, 0.8);
        document.querySelector('.menu').style.backgroundColor = rgba;
        bgColorInput.nextElementSibling.textContent = color;
      }

      function updateTextColor(color) {
        // 更新所有相关元素的文字颜色
        document.body.style.color = color;
        document.querySelectorAll('.link, .settings-title, .slider-value, .color-value').forEach(el => {
          el.style.color = color;
        });
        textColorInput.nextElementSibling.textContent = color;
      }

      // 辅助函数：将十六进制颜色转换为rgba
      function hexToRgba(hex, alpha) {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
      }

      // 应用保存的设置
      if (savedSettings.storyFontSize) {
        storySlider.value = savedSettings.storyFontSize;
        updateFontSize('.story-content', savedSettings.storyFontSize);
        storySlider.nextElementSibling.textContent = savedSettings.storyFontSize + 'px';
      }

      if (savedSettings.infoFontSize) {
        infoSlider.value = savedSettings.infoFontSize;
        updateFontSize('personstatus, academics', savedSettings.infoFontSize);
        infoSlider.nextElementSibling.textContent = savedSettings.infoFontSize + 'px';
      }

      if (savedSettings.containerPadding) {
        paddingSlider.value = savedSettings.containerPadding;
        updateContainerPadding(savedSettings.containerPadding);
        paddingSlider.nextElementSibling.textContent = savedSettings.containerPadding + 'px';
      }

      if (savedSettings.contentPadding) {
        contentPaddingSlider.value = savedSettings.contentPadding;
        updateContentPadding(savedSettings.contentPadding);
        contentPaddingSlider.nextElementSibling.textContent = savedSettings.contentPadding + 'px';
      }

      if (savedSettings.bgColor) {
        bgColorInput.value = savedSettings.bgColor;
        updateBackgroundColor(savedSettings.bgColor);
      }

      if (savedSettings.textColor) {
        textColorInput.value = savedSettings.textColor;
        updateTextColor(savedSettings.textColor);
      }

      // 监听滑块变化
      storySlider.addEventListener('input', (e) => {
        const size = e.target.value;
        updateFontSize('.story-content', size);
        e.target.nextElementSibling.textContent = size + 'px';
        saveSettings('storyFontSize', size);
      });

      infoSlider.addEventListener('input', (e) => {
        const size = e.target.value;
        updateFontSize('personstatus, academics', size);
        e.target.nextElementSibling.textContent = size + 'px';
        saveSettings('infoFontSize', size);
      });

      paddingSlider.addEventListener('input', (e) => {
        const size = e.target.value;
        updateContainerPadding(size);
        e.target.nextElementSibling.textContent = size + 'px';
        saveSettings('containerPadding', size);
      });

      contentPaddingSlider.addEventListener('input', (e) => {
        const size = e.target.value;
        updateContentPadding(size);
        e.target.nextElementSibling.textContent = size + 'px';
        saveSettings('contentPadding', size);
      });

      bgColorInput.addEventListener('input', (e) => {
        const color = e.target.value;
        updateBackgroundColor(color);
        saveSettings('bgColor', color);
      });

      textColorInput.addEventListener('input', (e) => {
        const color = e.target.value;
        updateTextColor(color);
        saveSettings('textColor', color);
      });

      // 添加预设配色功能
      document.querySelectorAll('.preset-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const bgColor = btn.dataset.bg;
          const textColor = btn.dataset.text;

          // 更新颜色选择器的值
          bgColorInput.value = bgColor;
          textColorInput.value = textColor;

          // 应用颜色
          updateBackgroundColor(bgColor);
          updateTextColor(textColor);

          // 保存设置
          saveSettings('bgColor', bgColor);
          saveSettings('textColor', textColor);
        });
      });
    }

    // 修改绑定事件监听器函数
    function bindEventListeners() {
      window.addEventListener('resize', () => {
        const savedSettings = loadSettings();
        if (savedSettings.storyFontSize) {
          document.querySelectorAll('.story-content').forEach(el => {
            el.style.fontSize = savedSettings.storyFontSize + 'px';
          });
        }
        if (savedSettings.infoFontSize) {
          document.querySelectorAll('personstatus, academics').forEach(el => {
            el.style.fontSize = savedSettings.infoFontSize + 'px';
          });
        }
        if (savedSettings.containerPadding) {
          const container = document.querySelector('.container');
          container.style.padding = savedSettings.containerPadding + 'px';
          container.style.height = `calc(100vh - ${savedSettings.containerPadding * 2}px)`;
        }
        if (savedSettings.contentPadding) {
          document.querySelector('.content-area').style.padding = savedSettings.contentPadding + 'px';
        }
        if (savedSettings.textColor) {
          document.body.style.color = savedSettings.textColor;
          document.querySelectorAll('.link, .settings-title, .slider-value, .color-value').forEach(el => {
            el.style.color = savedSettings.textColor;
          });
        }
        if (savedSettings.bgColor) {
          document.body.style.background = savedSettings.bgColor;
          const rgba = hexToRgba(savedSettings.bgColor, 0.8);
          document.querySelector('.menu').style.backgroundColor = rgba;
        }
      });
    }
  </script>
</body>

</html>
```